---
- name: Setup kubelet extra args
  template:
    src: kubelet_extra_args.j2
    dest: /etc/default/kubelet

- name: Check kubernetes control plane is running
  shell: ps -e | grep -E 'kube-apiserver|kube-scheduler|kube-controller|kubelet|etcd'
  register: kubernetes_control_plane_pids
  changed_when: false
  failed_when: false

- name: Kubeadm init
  command: kubeadm init --apiserver-advertise-address={{ private_network_ip }} --pod-network-cidr={{ pod_network_cidr }}
  register: kubeadm_init_output
  failed_when: "kubeadm_init_success not in kubeadm_init_output.stdout"
  when:
    - "'kube-apiserver' not in kubernetes_control_plane_pids.stdout"
    - "'kube-scheluder' not in kubernetes_control_plane_pids.stdout"
    - "'kube-controller' not in kubernetes_control_plane_pids.stdout"
    - "'kubelet' not in kubernetes_control_plane_pids.stdout"
    - "'etcd' not in kubernetes_control_plane_pids.stdout"

- name: Create kube-config directory
  file:
    path: /home/{{ user }}/.kube
    state: directory
  register: file_output

- name: Get user ID
  command: id -u {{ user }}
  register: user_id_output
  changed_when: false

- name: Get group ID
  command: id -g {{ user }}
  register: group_id_output
  changed_when: false

- name: Copy admin.conf to kube-config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ user }}/.kube/config
    owner: '{{ user_id_output.stdout }}'
    group: '{{ group_id_output.stdout }}'
    remote_src: true

- name: Check flannel is running
  shell: ps -e | grep flanneld
  register: flannel_running_output
  changed_when: false
  failed_when: false

- name: Get flannel yml file
  template:
    src: kube_flannel.j2
    dest: /tmp/kube-flannel.yml

- name: Install flannel as pod network
  shell: kubectl apply -f /tmp/kube-flannel.yml
  become: true
  become_user: '{{ user }}'
  when: "'flanneld' not in flannel_running_output.stdout"

- name: Create kubeadm join command
  command: kubeadm token create --print-join-command
  register: token_output

- name: Cache kubeadm join command
  set_fact:
    kubeadm_join_command: '{{ token_output.stdout }}'
    cacheable: true